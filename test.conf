filter {
  if [fields][program] == "mt4" {
    grok {
      match => {
        "message" => "^%{NUMBER:mt_log_type}\t%{TIME:mt_time}\t(%{IPV4:client_ip}|(?<mt_plugin>[^\t]+))?\t%{GREEDYDATA:message}$"
      }
      overwrite => "message"
    }
    grok {
      match => {
        "source" =>"(?:%{GREEDYDATA})[\\/]?(?:%{BASE10NUM:mt_date})\.log"
      }
    }
    grok {
      match => {
        "message" => "\'%{POSINT:mt_account_id}'"
      }
    }
    if  [mt_plugin] =~ /DealerLogic.*/ {
      if [message] =~ /Confirm:/ {
        grok {
          patterns_dir   => [ "/etc/logstash/patterns.d" ]
          match => {
            "message"=> "^Confirm:\s%{WORD:mt_group}%{GREEDYDATA}%{DL_DATA}\s%{DL_EXEC_TIME}"
          }
        }
      }
      if [message] =~ /Confirm[^:]/ {
        grok {
          patterns_dir   => [ "/etc/logstash/patterns.d" ]
          match => {
            "message"=> "Confirm[^:]%{GREEDYDATA}%{DL_DATA}\s%{DL_EXEC_TIME}"
          }
        }
      }
      if [dl_exec_time_ms] {
        mutate {
          convert => {
            "dl_exec_time_ms" => "integer"
          }
        }
      }
      if [mt_dl_volume] {
        mutate {
          convert => {
            "mt_dl_volume" => "float"
          }
        }
      }
      if [mt_dl_exec_mode] {
        if ![mt_dl_action]{
          mutate {
            add_field => {
              "mt_dl_action" => "open"
            }
          }
        }
      }
    }
    if [message] =~ /^\'\d+\':/ {
      grok {
        # should be deleted
        match => {
          "message" => "\'%{POSINT:mt_account_id}'\:"
        }
      }
      if [mt_log_type] == "2" {
        grok {
          match => {
            "message" => "\'%{POSINT}'\: login \(%{POSINT:mt_client_version}, %{WORD:mt_client_type}, dc: %{INT:mt_dc_id}, cid: (?<mt_cid>[0-9a-zA-Z]+)?, ping: (%{INT:mt_ping})? ms(, %{WORD:mt_investor})?\)"
          }
        }
        if [mt_investor] {
          mutate {
            update => { "mt_investor" => "1" }
          #  convert => { "mt_investor" => "integer" }
          }
        }
        else {
          mutate {
            add_field => { "mt_investor" => "0" }
            convert => { "mt_investor" => "integer" }
          }
        }
      }
    }
    if [mt_plugin] == "Monitor" {
      if [message] =~ /^connections: / {
        grok {
          match => {
            "message" => "connections: %{INT:mt_mon_connections}  free memory: %{INT:mt_mon_free_memory} kb  cpu: %{INT:mt_mon_cpu_percent}\%  net: %{INT:mt_mon_network_load} Kbyte/s sockets: %{INT:mt_mon_sockets} threads: %{INT:mt_mon_cpu_threads} handles: %{INT:mt_mon_cpu_handles}"
          }
        }
      }
      if [message] =~ /^max\. memory block: / {
        grok {
          match => {
            "message" => "max. memory block: %{INT:mt_mon_max_memory_block} kb process cpu: %{INT:mt_mon_process_cpu}\%  net in: %{INT:mt_mon_network_in} Kbyte/s  net out: %{INT:mt_mon_network_out} Kbyte/s"
          }
        }
      }
    }
    mutate {
      add_field => {
        "mt_full_date" => "%{mt_date} %{mt_time}"
      }
      remove_field => ["mt_date" ,"mt_time"]
      convert => { "mt_log_type" => "integer" }
      convert => { "mt_account_id" => "integer" }
      convert => { "mt_client_version" => "integer" }
      convert => { "mt_dc_id" => "integer" }
      convert => { "mt_ping" => "integer" }
      # convert => { "mt_investor" => "integer" }
      convert => { "mt_mon_connections" => "integer" }
      convert => { "mt_mon_free_memory" => "integer" }
      convert => { "mt_mon_cpu_percent" => "integer" }
      convert => { "mt_mon_network_load" => "integer" }
      convert => { "mt_mon_sockets" => "integer" }
      convert => { "mt_mon_cpu_threads" => "integer" }
      convert => { "mt_mon_cpu_handles" => "integer" }
      convert => { "mt_mon_max_memory_block" => "integer" }
      convert => { "mt_mon_process_cpu" => "integer" }
      convert => { "mt_mon_network_in" => "integer" }
      convert => { "mt_mon_network_out" => "integer" }
    }
    date {
      match => ["mt_full_date", "yyyyMMdd HH:mm:ss.SSS"]
      remove_field => "mt_full_date"
    }
    mutate {
      rename => {
        "program" => "metatrader"
      }
    }
  }
}
